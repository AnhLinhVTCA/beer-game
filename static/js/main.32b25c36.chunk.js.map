{"version":3,"sources":["index.js"],"names":["a","info","document","getElementById","canvas","resizeCanvas","width","height","worldWidth","worldHeight","gl","getContext","camera","createOrthoCamera","batch","createBatch","world","b2World","b2Vec2","loadTexture","bg","bottle","can1","can2","disk","addEventListener","e","which","console","log","createBottle","x","y","dynamic","density","bodyDef","b2BodyDef","type","b2BodyType","b2_dynamicBody","b2_staticBody","position","userData","texure","body","CreateBody","shape","b2PolygonShape","shape1","shape2","SetAsBox","Set","CreateFixture","createCan","w","h","createCircle","r","impulseX","impulseY","b2CircleShape","ApplyLinearImpulse","b2Vec2_zero","b2_kinematicBody","createDisk","tmp","clearColor","update","delta","clear","COLOR_BUFFER_BIT","Step","setProjection","combined","begin","draw","GetBodyList","GetNext","pos","GetPosition","fixture","GetFixtureList","data","GetUserData","GetShape","GetType","b2ShapeType","e_polygonShape","vertices","m_vertices","length","vertice","push","GetAngle","e_circleShape","m_radius","end","game","createGameLoop","setInterval","innerHTML","Math","round","getFps","init"],"mappings":"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","file":"static/js/main.32b25c36.chunk.js","sourcesContent":["import \"./index.css\";\nimport {\n  createGameLoop,\n  resizeCanvas,\n  createOrthoCamera,\n  createBatch,\n  // drawPolygon,\n  // drawCircle,\n  loadTexture\n} from \"gdxjs\";\nimport {\n  b2BodyDef,\n  b2BodyType,\n  b2Vec2,\n  b2World,\n  b2PolygonShape,\n  b2ShapeType,\n  b2CircleShape,\n  b2Vec2_zero\n} from \"@flyover/box2d\";\n// import createWhiteTexure from \"gl-white-texture\";\n\nconst init = async () => {\n  const info = document.getElementById(\"info\");\n  const canvas = document.getElementById(\"main\");\n  const [width, height] = resizeCanvas(canvas, 1);\n  const [worldWidth, worldHeight] = [10, 20];\n  const gl = canvas.getContext(\"webgl\");\n  const camera = createOrthoCamera(worldWidth, worldHeight, width, height);\n  const batch = createBatch(gl);\n  // const whiteText = createWhiteTexure(gl);\n  const world = new b2World(new b2Vec2(0, 10));\n  // const inputHandler = new InputHandler(canvas);\n  const bg = await loadTexture(gl, \"./bg.jpg\");\n  const bottle = await loadTexture(gl, \"./bottle.png\");\n  const can1 = await loadTexture(gl, \"./can-1.png\");\n  const can2 = await loadTexture(gl, \"./can-2.png\");\n  const disk = await loadTexture(gl, \"./disk.png\");\n\n  document.addEventListener(\"keydown\", e => {\n    if (e.which === 37 || e.which === 65) {\n      console.log(\"left\");\n    } else if (e.which === 39 || e.which === 68) {\n      console.log(\"right\");\n    }\n  });\n\n  const createBottle = (x, y, dynamic = true, density = 0.1) => {\n    const bodyDef = new b2BodyDef();\n    bodyDef.type = dynamic\n      ? b2BodyType.b2_dynamicBody\n      : b2BodyType.b2_staticBody;\n    bodyDef.position = new b2Vec2(x, y);\n    bodyDef.userData = {\n      texure: bottle,\n      width: 1,\n      height: 5.5\n    };\n    const body = world.CreateBody(bodyDef);\n    const shape = new b2PolygonShape();\n    const shape1 = new b2PolygonShape();\n    const shape2 = new b2PolygonShape();\n    shape.SetAsBox(0.25, 0.3, new b2Vec2(0, -2.5));\n    shape1.Set([\n      new b2Vec2(-0.25, -2.2),\n      new b2Vec2(0.25, -2.2),\n      new b2Vec2(0.5, 0.75),\n      new b2Vec2(-0.5, 0.75)\n    ]);\n    shape2.SetAsBox(0.5, 1, new b2Vec2(0, 1.75));\n    body.CreateFixture(shape, density);\n    body.CreateFixture(shape1, density);\n    body.CreateFixture(shape2, density);\n    return body;\n  };\n\n  const createCan = (x, y, w, h, dynamic = true, density = 1) => {\n    const bodyDef = new b2BodyDef();\n    bodyDef.type = dynamic\n      ? b2BodyType.b2_dynamicBody\n      : b2BodyType.b2_staticBody;\n    bodyDef.position = new b2Vec2(x, y);\n    bodyDef.userData = {\n      texure: can2,\n      width: 1,\n      height: 2\n    };\n    const body = world.CreateBody(bodyDef);\n    const shape = new b2PolygonShape();\n    shape.SetAsBox(w / 2, h / 2);\n    body.CreateFixture(shape, density);\n    return body;\n  };\n\n  const createDisk = (x, y, w, h, density = 1) => {\n    const bodyDef = new b2BodyDef();\n    bodyDef.type = b2BodyType.b2_kinematicBody;\n    bodyDef.position = new b2Vec2(x, y);\n    bodyDef.userData = {\n      texure: disk,\n      width: 6,\n      height: 0.5\n    };\n    const body = world.CreateBody(bodyDef);\n    const shape = new b2PolygonShape();\n    shape.SetAsBox(w / 2, h / 2);\n    body.CreateFixture(shape, density);\n    return body;\n  };\n\n  const createCircle = (x, y, r, impulseX, impulseY) => {\n    const bodyDef = new b2BodyDef();\n    bodyDef.type = b2BodyType.b2_dynamicBody;\n    bodyDef.position = new b2Vec2(x, y);\n    bodyDef.userData = {\n      texure: can1\n    };\n    const body = world.CreateBody(bodyDef);\n    const shape = new b2CircleShape(r);\n    body.CreateFixture(shape, 1);\n    body.ApplyLinearImpulse(new b2Vec2(impulseX, impulseY), b2Vec2_zero);\n    return body;\n  };\n\n  createDisk(worldWidth / 2, 15, 6, 0.5);\n  createBottle(5, 5);\n  createCan(3, 5, 1, 2);\n  createCircle(4.8, 1, 0.5, 0, 0);\n\n  const tmp = [];\n\n  gl.clearColor(0, 0, 0, 1);\n  const update = delta => {\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    world.Step(delta, 8, 3);\n    batch.setProjection(camera.combined);\n    batch.begin();\n    batch.draw(bg, 0, 0, worldWidth, worldHeight);\n    for (let body = world.GetBodyList(); body; body = body.GetNext()) {\n      const pos = body.GetPosition();\n      for (\n        let fixture = body.GetFixtureList();\n        fixture;\n        fixture = fixture.GetNext()\n      ) {\n        const data = body.GetUserData();\n        const shape = fixture.GetShape();\n        if (shape.GetType() === b2ShapeType.e_polygonShape) {\n          const vertices = shape.m_vertices;\n          tmp.length = 0;\n          for (let vertice of vertices) {\n            tmp.push(pos.x + vertice.x, pos.y + vertice.y);\n          }\n          // drawPolygon(batch, whiteText, tmp, 0.1);\n          batch.draw(\n            data.texure,\n            pos.x - data.width / 2,\n            pos.y - data.height / 2,\n            data.width,\n            data.height,\n            data.width / 2,\n            data.height / 2,\n            body.GetAngle()\n          );\n        } else if (shape.GetType() === b2ShapeType.e_circleShape) {\n          // drawCircle(batch, Text, pos.x, pos.y, shape.m_radius, 0.1);\n          batch.draw(\n            data.texure,\n            pos.x - shape.m_radius,\n            pos.y - shape.m_radius,\n            shape.m_radius * 2,\n            shape.m_radius * 2,\n            shape.m_radius,\n            shape.m_radius,\n            body.GetAngle()\n          );\n        }\n      }\n    }\n    batch.end();\n  };\n\n  const game = createGameLoop(update);\n  setInterval(() => {\n    info.innerHTML = `FPS : ${Math.round(game.getFps())}`;\n  }, 1000);\n};\n\ninit();\n"],"sourceRoot":""}